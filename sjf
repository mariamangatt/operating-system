#include <stdio.h>

struct process {
    int pid;
    int at;
    int bt;
    int ct;
    int wt;
    int tat;
} p[20], temp;

void swap(int i, int j) {
    temp = p[i];
    p[i] = p[j];
    p[j] = temp;
}

void atsort(int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i].at > p[j].at || (p[i].at == p[j].at && p[i].pid > p[j].pid)) {
                swap(i, j);
            }
        }
    }
}

void sjf(int n) {
    atsort(n);
    int ict = 0;
    for (int i = 0; i < n; i++) {
        if (ict < p[i].at) {
            ict = p[i].at;
        }
        p[i].ct = ict + p[i].bt;
        ict = p[i].ct;
        p[i].tat = p[i].ct - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;

        for (int j = i + 1; j < n; j++) {
            if (p[j].at <= ict && p[j].bt < p[i + 1].bt) {
                swap(j, i + 1);
            }
        }
    }
}

int main() {
    int n;
    float total_wt = 0, total_tat = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter Process ID: ");
        scanf("%d", &p[i].pid);
        printf("Enter Arrival Time: ");
        scanf("%d", &p[i].at);
        printf("Enter Burst Time: ");
        scanf("%d", &p[i].bt);
    }

    sjf(n);

    printf("\nSJF Scheduling:\n");
    printf("Process ID\tArrival Time\tBurst Time\tCompletion Time\tTurn Around Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
        total_wt += p[i].wt;
        total_tat += p[i].tat;
    }

    printf("\nAverage Turn Around Time: %.2f\n", total_tat / n);
    printf("Average Waiting Time: %.2f\n", total_wt / n);

    return 0;
}
